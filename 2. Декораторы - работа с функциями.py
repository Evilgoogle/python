## Функций в python являются объектами и соотвественно их можно возвращать
## из другой функций, передавать в качестве аргумента. Функция может быть определана
## внутри другой функций. Похоже на js

# тут на лицо js - аргумент decorate передается вн функциям что стоят на уровень
# ниже. К тому же как на js внутри созданные переменные не передаются к родителям.
# В python переменные, аргументы глобальны и ведит себя как на js

# Делаем декораций:
# 1 -------------------
x = 10
def my_decorate(decorate):
    def wrapper():
        print(x);
        print('код отрабатывается до вызова функций');
        decorate()
        print('после вызова функций');

    return wrapper;

def func():
    print('default easy');
## Схожесть с js, так как функция у нас объект - если сделать print(func), то
## получаем этот объект, если напишем func() то функция вызовится
# print(func());
#decorate = my_decorate(func); # это передача функций как объект с целью получение его работы внутри функций my_decorate называется - декорация
#decorate()

# 2 --------------------
@my_decorate # @ - такой вариант для написание декораций. Тут my_decorate станет декоратором для go, go передастся в my_decorate как аргумент 
def go():
    print('Раз два')

#go(); # Тут уже вызов будет через go(), а не через my_decorate как на примере выше.
# Почему через go? На самом же деле @my_decorate здесь сделался так: go = my_decorate(go) и вызываем go() которая переопределилась

#------------
# Можно передовать функций на функций и так передокорировать go = my_decorate(set_decore(go))
# или написать так:
# @my_decorate
# @set_decore
# def go(): print('Yeah')

#--------------
## Декорирование работает внурии классов также
def decorate_gg(func):
    def wrapper(self, var):
        print('Vare - {}'.format(var));
        return func(self, var);
    return wrapper

class Lucy:
    def __init__(self):
        self.age = 32
    @decorate_gg
    def say(self, var):
        print("Мне {} лет, а ты бы сколько дал?".format(self.age + var))

br = Lucy();
print(br.say(15))
